package com.app.controllers;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.http.ResponseEntity;

import java.io.File;
import java.io.IOException;

@RestController
@RequestMapping("/books")
public class BookController {

    private final String uploadDir = "/uploaded_files";

    @PostMapping(value="/upload",consumes = "multipart/form-data")
    public ResponseEntity<String> uploadBook(
            @RequestParam("epubFile") MultipartFile epubFile,
            @RequestParam("coverImage") MultipartFile coverImage) {

        try {
        	 String currentWorkingDir = System.getProperty("user.dir");
            // Create book and image directories if they don't exist
        	 File bookDir = new File(currentWorkingDir, uploadDir + "/book");
             File imageDir = new File(currentWorkingDir, uploadDir + "/image");
            if (!bookDir.exists()) {
                bookDir.mkdirs();
            }

            if (!imageDir.exists()) {
                imageDir.mkdirs();
            }

            // Save EPUB file to the book directory
            String epubFileName = "epub_" + System.currentTimeMillis() + ".epub";
            String epubFilePath = new File(bookDir, epubFileName).getPath();
            epubFile.transferTo(new File(epubFilePath));

            // Save cover image to the image directory
            String coverImageName = "cover_" + System.currentTimeMillis() + ".jpg";
            String coverImagePath = new File(imageDir, coverImageName).getPath();
            coverImage.transferTo(new File(coverImagePath));

            // Save paths to the database (you would use a service or repository here)
            // bookService.saveBookPaths(epubFilePath, coverImagePath);

            return ResponseEntity.ok("Book uploaded successfully.");
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body("Failed to upload book.");
        }
    }
}
