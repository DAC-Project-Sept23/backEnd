package com.app.services;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.commons.io.FileUtils;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.app.custom_exc.ContentNotFoundException;
import com.app.dto.EbookDto;
import com.app.dto.GetEbookDto;
import com.app.entities.Ebook;
import com.app.entities.Genre;
import com.app.entities.User;
import com.app.repositories.BookRepository;
import com.app.repositories.UserRepository;

@Service
@Transactional
public class BookServiceImpl implements BookService {

	private final String uploadDir = "uploaded_files";
	@Autowired
	private BookRepository bookRepo;
	@Autowired
	private UserRepository userRepo;

	@Autowired
	private ModelMapper mapper;

	public ResponseEntity<String> uploadBook(EbookDto ebook) throws IOException {
		String currentWorkingDir = System.getProperty("user.dir");
		File bookDir = new File(currentWorkingDir, uploadDir + File.separator + "books");
		File imageDir = new File(currentWorkingDir, uploadDir + File.separator + "cover_images");

		if (!bookDir.exists() && !bookDir.mkdirs()) {
			return ResponseEntity.status(500).body("Failed to create book directory.");
		}

		if (!imageDir.exists() && !imageDir.mkdirs()) {
			return ResponseEntity.status(500).body("Failed to create image directory.");
		}

		String epubFileName = "epub_" + System.currentTimeMillis() + ".epub";
		String epubFilePath = new File(bookDir, epubFileName).getAbsolutePath();
		ebook.getEpubFile().transferTo(new File(epubFilePath));

		String coverImageName = "cover_" + System.currentTimeMillis() + ".jpg";
		String coverImagePath = new File(imageDir, coverImageName).getAbsolutePath();
		ebook.getCoverImage().transferTo(new File(coverImagePath));

		Path baseDirPath = Paths.get(currentWorkingDir);
		Path relativeEpubPath = baseDirPath.relativize(Paths.get(epubFilePath));
		Path relativeCoverImagePath = baseDirPath.relativize(Paths.get(coverImagePath));

		
		User u = userRepo.findById(ebook.getUserId()).orElseThrow();
		Ebook b = new Ebook(u, ebook.getTitle(), ebook.getGenre(), ebook.getDescription(),
				ebook.getPrice(), relativeEpubPath.toString(), relativeCoverImagePath.toString());
		bookRepo.save(b);

		return ResponseEntity.ok("Book uploaded successfully.");
	}

	@Override
	public ResponseEntity<List<GetEbookDto>> getAllBooks() throws IOException {
		return getAllBooksInternal(bookRepo.findAll());
	}

	@Override
	public ResponseEntity<List<GetEbookDto>> getAllBooksGenre(Genre genre) {
		return getAllBooksInternal(bookRepo.getAllByGenre(genre));
	}

	private ResponseEntity<List<GetEbookDto>> getAllBooksInternal(List<Ebook> books) {
		if (books != null) {
			List<GetEbookDto> dtos = books.stream().map(this::convertToDtoWithContent).collect(Collectors.toList());
			return ResponseEntity.ok(dtos);
		} else {
			return ResponseEntity.notFound().build();
		}
	}

	private GetEbookDto convertToDtoWithContent(Ebook ebook) {
		try {
			byte[] epubFileContent = FileUtils.readFileToByteArray(new File(ebook.getFilePath()));
			byte[] coverImageContent = FileUtils.readFileToByteArray(new File(ebook.getImagePath()));

			return new GetEbookDto(ebook.getTitle(), ebook.getGenre(), ebook.getDescription(), ebook.getPrice(),
					epubFileContent, coverImageContent);
		} catch (IOException e) {
			e.printStackTrace();
			throw new ContentNotFoundException("Content not found for ebook with ID: " + ebook.getId());
		}
	}

	@Override
	public ResponseEntity<GetEbookDto> getByBookId(Long id) {
	    Optional<Ebook> ebookOptional = bookRepo.findById(id);
	    
	    if (ebookOptional.isPresent()) {
	        Ebook ebook = ebookOptional.get();
	        GetEbookDto ebookDto = convertToDtoWithContent(ebook);
	        
	       
	            return ResponseEntity.ok(ebookDto);
	       
	    } else {
	        return ResponseEntity.notFound().build();
	    }
	}


	
	
}

//package com.app.services;
//
//import java.io.File;
//import java.io.IOException;
//import java.nio.file.Path;
//import java.nio.file.Paths;
//import java.util.List;
//import java.util.stream.Collectors;
//
//import org.apache.commons.io.FileUtils;
//import org.modelmapper.ModelMapper;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.http.ResponseEntity;
//import org.springframework.stereotype.Service;
//import org.springframework.transaction.annotation.Transactional;
//
//import com.app.dto.EbookDto;
//import com.app.dto.GetEbookDto;
//import com.app.entities.Ebook;
//import com.app.entities.Genre;
//import com.app.repositories.BookRepository;
//
//@Service
//@Transactional
//public class BookServiceImpl implements BookService {
//
//	private final String uploadDir = "uploaded_files";
//	@Autowired
//	private BookRepository bookRepo;
//
//	@Autowired
//	private ModelMapper mapper;
//
//	public ResponseEntity<String> uploadBook(EbookDto ebook) throws IOException {
//		// Get the current working directory
//		String currentWorkingDir = System.getProperty("user.dir");
//
//		// Create book and image directories if they don't exist
//		File bookDir = new File(currentWorkingDir, uploadDir + File.separator + "books");
//		File imageDir = new File(currentWorkingDir, uploadDir + File.separator + "cover_images");
//
//		if (!bookDir.exists() && !bookDir.mkdirs()) {
//			return ResponseEntity.status(500).body("Failed to create book directory.");
//		}
//
//		if (!imageDir.exists() && !imageDir.mkdirs()) {
//			return ResponseEntity.status(500).body("Failed to create image directory.");
//		}
////MultipartFile epubFile, MultipartFile coverImage
//		// Save EPUB file to the book directory
//		String epubFileName = "epub_" + System.currentTimeMillis() + ".epub";
//		String epubFilePath = new File(bookDir, epubFileName).getAbsolutePath();
//		ebook.getEpubFile().transferTo(new File(epubFilePath));
//
//		// Save cover image to the image directory
//		String coverImageName = "cover_" + System.currentTimeMillis() + ".jpg";
//		String coverImagePath = new File(imageDir, coverImageName).getAbsolutePath();
//		ebook.getCoverImage().transferTo(new File(coverImagePath));
//
//		// Get the base directory
//		Path baseDirPath = Paths.get(currentWorkingDir);
//
//		// Get the relative path of the EPUB file and cover image
//		Path relativeEpubPath = baseDirPath.relativize(Paths.get(epubFilePath));
//		Path relativeCoverImagePath = baseDirPath.relativize(Paths.get(coverImagePath));
//
//		// Log relative paths for debugging
//		System.out.println("Relative EPUB path: " + relativeEpubPath.toString());
//		System.out.println("Relative cover image path: " + relativeCoverImagePath.toString());
//
//		// Save paths to the database (you would use a repository here)
//		// bookRepository.saveBookPaths(epubFilePath, coverImagePath);
//
//		bookRepo.save(new Ebook(ebook.getTitle(), ebook.getGenre(), ebook.getDescription(), ebook.getPrice(),
//				relativeEpubPath.toString(), relativeCoverImagePath.toString()));
//
//		return ResponseEntity.ok("Book uploaded successfully.");
//	}
//
//	@Override
//	public ResponseEntity<List<GetEbookDto>> getAllBooks() throws IOException {
//		// Fetch all books from the repository
//		List<Ebook> books = bookRepo.findAll();
//
//		System.out.println("here>>>>>>>>>>In get all books");
//		List<GetEbookDto> ebookDtos = books.stream().map(book -> {
//			try {
//				// Read the EPUB file and cover image as byte arrays
//				byte[] epubFileContent = FileUtils.readFileToByteArray(new File(book.getFilePath()));
//				byte[] coverImageContent = FileUtils.readFileToByteArray(new File(book.getImagePath()));
//
//				return new GetEbookDto(
//
//						book.getTitle(), book.getGenre(), book.getDescription(), book.getPrice(), epubFileContent,
//						coverImageContent);
//			} catch (IOException e) {
//				e.printStackTrace();
//				return null;
//			}
//		}).collect(Collectors.toList());
//
//		
//		if(ebookDtos!=null)
//		return ResponseEntity.ok(ebookDtos);
//		
//		return ResponseEntity.notFound().build();
//
//	}
//
//	
//
//	@Override
//	public ResponseEntity<List<GetEbookDto>> getAllBooksGenre(Genre genre) {
//	    List<Ebook> books = bookRepo.getAllByGenre(genre);
//	    if (books != null) {
//	        List<GetEbookDto> dtos = books.stream().map(book -> {
//	            try {
//	                byte[] epubFileContent = FileUtils.readFileToByteArray(new File(book.getFilePath()));
//	                byte[] coverImageContent = FileUtils.readFileToByteArray(new File(book.getImagePath()));
//
//	                return new GetEbookDto(
//	                        book.getTitle(), book.getGenre(), book.getDescription(), book.getPrice(),
//	                        epubFileContent, coverImageContent);
//	            } catch (IOException e) {
//	                e.printStackTrace();
//	                return null;
//	            }
//	        }).collect(Collectors.toList());
//	        
//	        return ResponseEntity.ok(dtos);
//	    } else {
//	        return ResponseEntity.notFound().build();
//	    }
//	}
//
//
//	
//	
//	// this methdod is only for debugging purpose
//		@Override
//		public byte[] getBytes() throws IOException {
//			// Fetch all books from the repository
//			List<Ebook> books = bookRepo.findAll();
//			for (Ebook b : books) {
//
//				return FileUtils.readFileToByteArray(new File(b.getImagePath()));
//
//			}
//			return null;
//
//		}
//
//}